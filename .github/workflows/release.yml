name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            executable: rtl
            artifact: rutile-linux-x64
          - os: macos-latest
            executable: rtl
            artifact: rutile-macos-x64
          - os: windows-latest
            executable: rtl.exe
            artifact: rutile-windows-x64

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Racket
      uses: Bogdanp/setup-racket@v1.11
      with:
        architecture: 'x64'
        distribution: 'full'
        variant: 'CS'
        version: '8.17'
    
    - name: Install dependencies
      run: raco pkg install --auto --name rutile
    
    - name: Build executable
      run: raco exe -o ${{ matrix.executable }} main.rkt
    
    - name: Create distribution
      run: |
        mkdir release
        raco distribute release ${{ matrix.executable }}
        
    - name: Package artifacts (Unix)
      if: runner.os != 'Windows'
      run: |
        cd release
        tar -czf ../${{ matrix.artifact }}.tar.gz *
        
    - name: Package artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        cd release
        Compress-Archive -Path * -DestinationPath ../${{ matrix.artifact }}.zip
        
    - name: Upload artifact (Unix)
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}.tar.gz
        
    - name: Upload artifact (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: Release ${{ github.event.inputs.version }}
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true
        files: |
          artifacts/rutile-linux-x64/rutile-linux-x64.tar.gz
          artifacts/rutile-macos-x64/rutile-macos-x64.tar.gz
          artifacts/rutile-windows-x64/rutile-windows-x64.zip
        body: |
          ## Rutile ${{ github.event.inputs.version }}
          
          Stack-based agent DSL for LLM orchestration.
          
          ### Downloads
          
          - **Linux x64**: `rutile-linux-x64.tar.gz`
          - **macOS x64**: `rutile-macos-x64.tar.gz` 
          - **Windows x64**: `rutile-windows-x64.zip`
          
          ### Installation
          
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Add the `bin/` directory to your PATH
          4. Run `rtl --version` to verify installation
          
          ### Usage
          
          ```bash
          rtl repl                    # Start interactive REPL
          rtl run script.rtl          # Run a Rutile script
          rtl new project-name        # Create new project
          rtl build --static          # Build standalone executable
          ```
          
          See the included README.md for more information.